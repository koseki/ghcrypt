#! /bin/sh

CONFIG_FILE=$HOME/.ghcrypt
VERSION=0.4
AES_PASSPHRASE_LENGTH=128 # bytes

usage() {
  echo "ghcrypt v$VERSION"
  echo 'Encrypt or decrypt file using GitHub username.'
  echo
  echo 'Usage:'
  echo '    Encrypt and Sign: ghcrypt [--key privatekey] file github-username(reciever)'
  echo '  Verify and Decrypt: ghcrypt [--key privatekey] file.enc.tar github-username(sender)'
  echo
}

if [ x"$1" = x ]; then
  usage
  exit 1
fi

if [ x"$1" = "x--help" -o x"$1" = "x-h" ]; then
  usage
  exit
fi

if [ x"$1" = "x--key" ]; then
  shift
  PRIVATE_KEY="$1"
  shift
fi

FILE="$1"
GITHUB_USER="$2"

if [ x"$PRIVATE_KEY" = x ]; then
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "ERROR: No config file: $CONFIG_FILE"
    echo
    echo '  Write your GitHub private key path:'
    echo '  $ echo /home/yourname/.ssh/id_rsa > ~/.ghcrypt'
    echo '  $ chmod 400 ~/.ghcrypt'
    echo
    exit 1
  fi
  PRIVATE_KEY=$(cat "$CONFIG_FILE")
fi

if [ ! -f "$FILE" ]; then
  echo "ERROR: Target file must be file: $FILE"
  exit 1
fi
if [ x"$GITHUB_USER" = x ]; then
  echo "ERROR: GitHub user name required."
  usage
  exit 1
fi
if [ ! -f $PRIVATE_KEY ]; then
  echo "ERROR: Private key doesn't exist: $PRIVATE_KEY"
  exit 1
fi

download_publickey() {
  wget -O "$PUBLIC_KEY" "https://github.com/$GITHUB_USER.keys" || exit $?

  FINGERPRINT=$(ssh-keygen -l -f "$PUBLIC_KEY") || exit $?
  echo "----------------------------------------------------------------"
  echo "$1: $GITHUB_USER"
  echo "  https://github.com/$GITHUB_USER"
  echo "  $FINGERPRINT"
  echo "----------------------------------------------------------------"

  # require OpenSSH 5.6 or later.
  # http://www.openssh.com/txt/release-5.6
  #
  # * Allow ssh-keygen(1) to import (-i) and export (-e) of PEM and PKCS#8
  #   keys in addition to RFC4716 (SSH.COM) encodings via a new -m option
  #   (bz#1749)
  #
  ssh-keygen -f "$PUBLIC_KEY" -e -m PKCS8 > "$PUBLIC_KEY.pem" || exit $?
}

case "$FILE" in
*\.enc\.tar)
  BASENAME="${FILE%.*}"
  TMP_DIR="$BASENAME"
  INFILE="$TMP_DIR/$BASENAME"
  SIGFILE="$TMP_DIR/$BASENAME.sig"
  OUTFILE="${BASENAME%.*}"
  AES_KEY="$TMP_DIR/$OUTFILE.key"

  if [ -e "$TMP_DIR" ]; then
    echo "ERROR: $TMP_DIR already exits."
    exit 1
  fi
  if [ -e "$OUTFILE" ]; then
    echo "ERROR: $OUTFILE already exits."
    exit 1
  fi

  PUBLIC_KEY="$TMP_DIR/$GITHUB_USER.keys"

  tar xf "$FILE" || exit $?
  download_publickey Sender

  # Verify encrypted file using downloaded public key.
  openssl sha1 -verify "$PUBLIC_KEY.pem" -signature "$SIGFILE" "$INFILE" || exit $?

  # Decrypt AES passphrase using your private key.
  openssl rsautl -decrypt -in "$AES_KEY.enc" -out "$AES_KEY" -inkey "$PRIVATE_KEY" || exit $?

  # Decrypt file using AES passphrase
  openssl aes-256-cbc -d -in "$INFILE" -out "$OUTFILE" -pass "file:$AES_KEY" || exit $?

  rm "$AES_KEY"
  rm "$AES_KEY.enc"
  rm "$INFILE"
  rm "$SIGFILE"
  rm "$PUBLIC_KEY"
  rm "$PUBLIC_KEY.pem"
  rmdir "$TMP_DIR" || exit $?

  echo
  echo "Successfully Verified and Decrypted!"
  echo "  $FILE --> $OUTFILE"
  echo
  ;;
*)
  TMP_DIR="$FILE.enc"

  if [ -e "$TMP_DIR" ]; then
    echo "ERROR: $TMP_DIR already exits."
    exit 1
  fi
  if [ -e "$TMP_DIR.tar" ]; then
    echo "ERROR: $TMP_DIR.tar already exits."
    exit 1
  fi
  mkdir "$TMP_DIR" || exit $?

  PUBLIC_KEY="$TMP_DIR/$GITHUB_USER.keys"
  AES_KEY="$TMP_DIR/$FILE.key"
  OUTFILE="$TMP_DIR/$FILE.enc"
  SIGFILE="$OUTFILE.sig"

  # Download OpenSSH public key from GitHub and convert to PKCS#8 format.
  download_publickey Reciever

  # Generate random AES passphrase.
  cat /dev/urandom | LANG=C tr -dc '[:graph:]' | head -c "$AES_PASSPHRASE_LENGTH" > "$AES_KEY" || exit $?

  # Encrypt file using AES passphrase.
  openssl aes-256-cbc -e -in "$FILE" -out "$OUTFILE" -pass "file:$AES_KEY" || exit $?

  # Encrypt AES passphrase using downloaded publick key.
  openssl rsautl -encrypt -in "$AES_KEY" -out "$AES_KEY.enc" -inkey "$PUBLIC_KEY.pem" -pubin || exit $?

  # Remove AES passphrase file.
  rm "$AES_KEY" || exit $?

  # Sign encrypted file using your private key.
  openssl sha1 -sign "$PRIVATE_KEY" "$OUTFILE" > "$SIGFILE" || exit $?

  # Cleaning.
  rm "$PUBLIC_KEY"
  rm "$PUBLIC_KEY.pem"
  tar cf "$FILE.enc.tar" "$TMP_DIR"
  rm "$OUTFILE"
  rm "$SIGFILE"
  rm "$AES_KEY.enc"
  rmdir "$TMP_DIR" || exit $?

  echo
  echo "Successfully Encrypted and Signed!"
  echo "  $FILE --> $FILE.enc.tar"
  echo
  ;;
esac
